Q1. What is a constructer?
Ans--> Whenever we are creating an object some piece of the code will be executed
automatically to perform initialization of an object. This piece of code is nothing
but a constructor.
Main objective of the constructor is nothing but initialisation of Object.

Q2. What is a constructer chaining?
Ans--> Constructor chaining is a technique in Java where one constructor calls another constructor of the same class or of its superclass. It allows for the reuse of code and for creating multiple constructors with different parameters, which can simplify the process of object creation.

To achieve constructor chaining, the keyword "this" is used to call the constructor within the same class, and the keyword "super" is used to call the constructor of the superclass. The call to the constructor must be the first statement in the constructor. Here is an example:

class A {
  A() {
    System.out.println("Constructor of class A");
  }
}

class B extends A {
  B() {
    System.out.println("Constructor of class B");
  }
  B(int x) {
    this();
    System.out.println("Constructor of class B with parameter x: " + x);
  }
}

class Main {
  public static void main(String[] args) {
    B obj = new B(5);
  }
}

In this example, the constructor of class B with a parameter calls the no-argument constructor of class B using the this() statement. The output of this program would be:
Constructor of class A
Constructor of class B
Constructor of class B with parameter x: 5

Q3. Can we call a subclass constructer from a super class constructer?
Ans--> Yes, a subclass constructor can be called from a superclass constructor in Java. This is done using the super keyword. The super keyword is used to call a constructor in the superclass, and it must be the first statement in the subclass constructor.

Here's an example:

class Animal {
  Animal() {
    System.out.println("Animal class constructor");
  }
}

class Dog extends Animal {
  Dog() {
    super();
    System.out.println("Dog class constructor");
  }
}

public class Main {
  public static void main(String[] args) {
    Dog d = new Dog();
  }
}

In this example, the super keyword is used to call the constructor of the Animal class from the Dog class. The output of the program would be:
Animal class constructor
Dog class constructor

Q4. What happens if you keep a return type for a constructor?
Ans--> Constructors in Java do not have a return type, not even void. If you include a return type for a constructor, it will be treated as a regular method, not a constructor, and the compiler will raise an error.

Q5. What is No-arg constructor?
Ans--> A no-arg constructor, also known as a default constructor, is a constructor in Java that does not have any parameters. It is automatically generated by the Java compiler if no other constructors are defined in a class. The purpose of a no-arg constructor is to provide a simple way to create an instance of an object, without having to pass any arguments.

Here's an example:

class Example {
  Example() {
    System.out.println("This is a no-arg constructor");
  }
}

public class Main {
  public static void main(String[] args) {
    Example ex = new Example();
  }
}

In this example, the class Example has a no-arg constructor, which is automatically generated by the compiler. The output of the program would be:
This is a no-arg constructor

Q6. How is a No-arguement constructer different from the default constructer?
Ans--> The terms "no-arg constructor" and "default constructor" are often used interchangeably and refer to the same thing in Java. A no-arg constructor or default constructor is a constructor that does not take any arguments or parameters.

The purpose of a no-arg constructor or default constructor is to provide a simple way to create an instance of an object, without having to pass any arguments. If you do not provide any constructors in a class, the Java compiler will automatically generate a no-arg constructor for you.

Q7. When do we need constructer overloading?
Ans--> Constructor overloading is used when you want to provide multiple constructors for a class, each with a different set of parameters. The purpose of constructor overloading is to allow you to create objects in different ways, depending on the context in which they are being used.

Here's an example:

class Example {
  int a;
  int b;

  Example(int a, int b) {
    this.a = a;
    this.b = b;
  }

  Example(int a) {
    this.a = a;
    this.b = 0;
  }
}

public class Main {
  public static void main(String[] args) {
    Example ex1 = new Example(5, 10);
    Example ex2 = new Example(5);
  }
}

Q8. What is default constructor explain with an example?
Ans--> A default constructor, also known as a no-arg constructor, is a constructor in Java that does not have any parameters. It is automatically generated by the Java compiler if no other constructors are defined in a class. The purpose of a default constructor is to provide a simple way to create an instance of an object, without having to pass any arguments.

Here's an example:

class Example {
  int a;
  int b;

  Example() {
    this.a = 0;
    this.b = 0;
  }
}

public class Main {
  public static void main(String[] args) {
    Example ex = new Example();
  }
}

